# -*- coding: utf-8 -*-
"""Copy of artificial_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iTEtVN0Nf604itgG0MjIlQ_yEGKbI3yp

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""### Encoding categorical data

Label Encoding the "Gender" column
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:,2] = le.fit_transform(X[:,2])
#label encoding of gender column

print(X)
#here female was encoded into zero and male was encoded into 1

"""One Hot Encoding the "Geography" column"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
#we have to appply feature scaling for all the variables
#removing the selections of particular indices

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()
#creates variable ann of object of sequential class

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
#shallow neural network

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
# neural network

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))
#A weighted sum of inputs is passed through an activation function and this output serves as an input to the next layer. When the activation function for a neuron is a sigmoid function it is a guarantee that the output of this unit will always be between 0 and 1.
#unit is 1 because we need one neuron to encode the dependent variable

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam' ,loss= 'binary_crossentropy',metrics= ['accuracy'])
#compiling entire ann using an optimizer

"""Training The ANN

"""

ann.fit(X_train,y_train,batch_size=32,epochs=100)
#fit method is always used to train 
#the classic value of batch size is taken as 32
#number of epochs-- 100

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

Predicting test set results (for any input)
"""

y_pred=ann.predict(X_test)
y_pred=(y_pred>0.5)
#final predicted output in binary form
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""### Predicting the Test set results"""

#we are making predictions to evaluate the model
print(ann.predict(sc.transform([[1,0,0,600,1,40,3,600000,2,1,1,50000]])))
#we got the probablity

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix,accuracy_score
#scikit learn library already contains confusion metrics feature

cm=confusion_matrix(y_test,y_pred)
print(cm)
accuracy_score(y_test,y_pred)
#we got an accuracy of over 86 percent